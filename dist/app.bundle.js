!function(e){function n(n){for(var t,o,c=n[0],i=n[1],s=n[2],d=0,a=[];d<c.length;d++)o=c[d],k[o]&&a.push(k[o][0]),k[o]=0;for(t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t]);for(C&&C(n);a.length;)a.shift()();return I.push.apply(I,s||[]),r()}function r(){for(var e,n=0;n<I.length;n++){for(var r=I[n],t=!0,o=1;o<r.length;o++){var c=r[o];0!==k[c]&&(t=!1)}t&&(I.splice(n--,1),e=M(M.s=r[0]))}return e}var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,n){if(!_[e]||!j[e])return;for(var r in j[e]=!1,n)Object.prototype.hasOwnProperty.call(n,r)&&(v[r]=n[r]);0==--b&&0===g&&x()}(e,n),t&&t(e,n)};var o,c=!0,i="78ad4a7f8979389fb150",s=1e4,d={},a=[],l=[];function u(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:o!==e,active:!0,accept:function(e,r){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._acceptedDependencies[e[t]]=r||function(){};else n._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._declinedDependencies[e[r]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=n._disposeHandlers.indexOf(e);r>=0&&n._disposeHandlers.splice(r,1)},check:D,apply:H,status:function(e){if(!e)return f;p.push(e)},addStatusHandler:function(e){p.push(e)},removeStatusHandler:function(e){var n=p.indexOf(e);n>=0&&p.splice(n,1)},data:d[e]};return o=void 0,n}var p=[],f="idle";function h(e){f=e;for(var n=0;n<p.length;n++)p[n].call(null,e)}var y,v,m,b=0,g=0,w={},j={},_={};function O(e){return+e+""===e?+e:e}function D(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return c=e,h("check"),(n=s,n=n||1e4,new Promise(function(e,r){if("undefined"==typeof XMLHttpRequest)return r(new Error("No browser support"));try{var t=new XMLHttpRequest,o=M.p+""+i+".hot-update.json";t.open("GET",o,!0),t.timeout=n,t.send(null)}catch(e){return r(e)}t.onreadystatechange=function(){if(4===t.readyState)if(0===t.status)r(new Error("Manifest request to "+o+" timed out."));else if(404===t.status)e();else if(200!==t.status&&304!==t.status)r(new Error("Manifest request to "+o+" failed."));else{try{var n=JSON.parse(t.responseText)}catch(e){return void r(e)}e(n)}}})).then(function(e){if(!e)return h("idle"),null;j={},w={},_=e.c,m=e.h,h("prepare");var n=new Promise(function(e,n){y={resolve:e,reject:n}});for(var r in v={},k)E(r);return"prepare"===f&&0===g&&0===b&&x(),n});var n}function E(e){_[e]?(j[e]=!0,b++,function(e){var n=document.createElement("script");n.charset="utf-8",n.src=M.p+""+e+"."+i+".hot-update.js",document.head.appendChild(n)}(e)):w[e]=!0}function x(){h("ready");var e=y;if(y=null,e)if(c)Promise.resolve().then(function(){return H(c)}).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var r in v)Object.prototype.hasOwnProperty.call(v,r)&&n.push(O(r));e.resolve(n)}}function H(n){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var r,t,o,c,s;function l(e){for(var n=[e],r={},t=n.map(function(e){return{chain:[e],id:e}});t.length>0;){var o=t.pop(),i=o.id,s=o.chain;if((c=P[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var d=0;d<c.parents.length;d++){var a=c.parents[d],l=P[a];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([a]),moduleId:i,parentId:a};-1===n.indexOf(a)&&(l.hot._acceptedDependencies[i]?(r[a]||(r[a]=[]),u(r[a],[i])):(delete r[a],n.push(a),t.push({chain:s.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:r}}function u(e,n){for(var r=0;r<n.length;r++){var t=n[r];-1===e.indexOf(t)&&e.push(t)}}n=n||{};var p={},y=[],b={},g=function(){console.warn("[HMR] unexpected require("+j.moduleId+") to disposed module")};for(var w in v)if(Object.prototype.hasOwnProperty.call(v,w)){var j;s=O(w);var D=!1,E=!1,x=!1,H="";switch((j=v[w]?l(s):{type:"disposed",moduleId:w}).chain&&(H="\nUpdate propagation: "+j.chain.join(" -> ")),j.type){case"self-declined":n.onDeclined&&n.onDeclined(j),n.ignoreDeclined||(D=new Error("Aborted because of self decline: "+j.moduleId+H));break;case"declined":n.onDeclined&&n.onDeclined(j),n.ignoreDeclined||(D=new Error("Aborted because of declined dependency: "+j.moduleId+" in "+j.parentId+H));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(j),n.ignoreUnaccepted||(D=new Error("Aborted because "+s+" is not accepted"+H));break;case"accepted":n.onAccepted&&n.onAccepted(j),E=!0;break;case"disposed":n.onDisposed&&n.onDisposed(j),x=!0;break;default:throw new Error("Unexception type "+j.type)}if(D)return h("abort"),Promise.reject(D);if(E)for(s in b[s]=v[s],u(y,j.outdatedModules),j.outdatedDependencies)Object.prototype.hasOwnProperty.call(j.outdatedDependencies,s)&&(p[s]||(p[s]=[]),u(p[s],j.outdatedDependencies[s]));x&&(u(y,[j.moduleId]),b[s]=g)}var I,A=[];for(t=0;t<y.length;t++)s=y[t],P[s]&&P[s].hot._selfAccepted&&b[s]!==g&&A.push({module:s,errorHandler:P[s].hot._selfAccepted});h("dispose"),Object.keys(_).forEach(function(e){!1===_[e]&&function(e){delete k[e]}(e)});for(var S,U,C=y.slice();C.length>0;)if(s=C.pop(),c=P[s]){var q={},T=c.hot._disposeHandlers;for(o=0;o<T.length;o++)(r=T[o])(q);for(d[s]=q,c.hot.active=!1,delete P[s],delete p[s],o=0;o<c.children.length;o++){var L=P[c.children[o]];L&&((I=L.parents.indexOf(s))>=0&&L.parents.splice(I,1))}}for(s in p)if(Object.prototype.hasOwnProperty.call(p,s)&&(c=P[s]))for(U=p[s],o=0;o<U.length;o++)S=U[o],(I=c.children.indexOf(S))>=0&&c.children.splice(I,1);for(s in h("apply"),i=m,b)Object.prototype.hasOwnProperty.call(b,s)&&(e[s]=b[s]);var R=null;for(s in p)if(Object.prototype.hasOwnProperty.call(p,s)&&(c=P[s])){U=p[s];var J=[];for(t=0;t<U.length;t++)if(S=U[t],r=c.hot._acceptedDependencies[S]){if(-1!==J.indexOf(r))continue;J.push(r)}for(t=0;t<J.length;t++){r=J[t];try{r(U)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:s,dependencyId:U[t],error:e}),n.ignoreErrored||R||(R=e)}}}for(t=0;t<A.length;t++){var N=A[t];s=N.module,a=[s];try{M(s)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(r){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:r,originalError:e}),n.ignoreErrored||R||(R=r),R||(R=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:s,error:e}),n.ignoreErrored||R||(R=e)}}return R?(h("fail"),Promise.reject(R)):(h("idle"),new Promise(function(e){e(y)}))}var P={},k={1:0},I=[];function M(n){if(P[n])return P[n].exports;var r=P[n]={i:n,l:!1,exports:{},hot:u(n),parents:(l=a,a=[],l),children:[]};return e[n].call(r.exports,r,r.exports,function(e){var n=P[e];if(!n)return M;var r=function(r){return n.hot.active?(P[r]?-1===P[r].parents.indexOf(e)&&P[r].parents.push(e):(a=[e],o=r),-1===n.children.indexOf(r)&&n.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),a=[]),M(r)},t=function(e){return{configurable:!0,enumerable:!0,get:function(){return M[e]},set:function(n){M[e]=n}}};for(var c in M)Object.prototype.hasOwnProperty.call(M,c)&&"e"!==c&&"t"!==c&&Object.defineProperty(r,c,t(c));return r.e=function(e){return"ready"===f&&h("prepare"),g++,M.e(e).then(n,function(e){throw n(),e});function n(){g--,"prepare"===f&&(w[e]||E(e),0===g&&0===b&&x())}},r.t=function(e,n){return 1&n&&(e=r(e)),M.t(e,-2&n)},r}(n)),r.l=!0,r.exports}M.m=e,M.c=P,M.d=function(e,n,r){M.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},M.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},M.t=function(e,n){if(1&n&&(e=M(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(M.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)M.d(r,t,function(n){return e[n]}.bind(null,t));return r},M.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return M.d(n,"a",n),n},M.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},M.p="/",M.h=function(){return i};var A=window.webpackJsonp=window.webpackJsonp||[],S=A.push.bind(A);A.push=n,A=A.slice();for(var U=0;U<A.length;U++)n(A[U]);var C=S;I.push(["./src/index.js",3]),r()}({"./node_modules/css-loader/dist/cjs.js!./src/resource/style.css":function(e,n,r){n=e.exports=r("./node_modules/css-loader/dist/runtime/api.js")(!1);var t=r("./node_modules/css-loader/dist/runtime/getUrl.js"),o=t(r("./src/resource/iconfont.eot")),c=t(r("./src/resource/icon.png"));n.push([e.i,"@font-face {\r\n  font-family: 'iconfont';\r\n  src: url("+o+") format('eot');\r\n  font-weight: 600;\r\n  font-style: normal;\r\n}\r\n\r\n.hello {\r\n  color: brown;\r\n  font-family: 'iconfont';\r\n  background: url("+c+")\r\n}",""])},"./src/index.js":function(e,n,r){"use strict";r.r(n),function(n){var t=r("./src/print.js"),o=(r("./src/resource/style.css"),r("./src/resource/icon.png")),c=r.n(o),i=r("./src/math.js");const s=r("./node_modules/path-browserify/index.js");function d(){var e=document.createElement("div"),r=document.createElement("pre"),o=document.createElement("button");e.classList.add("hello"),console.log(s.resolve(n)),console.log(s.resolve(n,"dist")),console.log(n);var d=new Image;return d.src=c.a,e.appendChild(d),o.innerHTML="Click m and check the console!",o.onclick=t.default,e.appendChild(o),r.innerHTML=["hello webpack","5 cubed is equal to"+Object(i.a)(5)].join("\n\n"),r}let a=d();document.body.appendChild(a),e.hot.accept("./src/print.js",function(e){t=r("./src/print.js"),console.log("Accepting the updated printMe module!"),document.body.removeChild(a),a=d(),document.body.appendChild(a)}.bind(this))}.call(this,"/")},"./src/math.js":function(e,n,r){"use strict";function t(e){return e*e*e}r.d(n,"a",function(){return t})},"./src/print.js":function(e,n,r){"use strict";function t(){console.log("Updating print.js...")}r.r(n),r.d(n,"default",function(){return t})},"./src/resource/icon.png":function(e,n,r){e.exports=r.p+"ead4bc1052fa35f148ed7c48aff31bc7.png"},"./src/resource/iconfont.eot":function(e,n,r){e.exports=r.p+"c587339b42148566b64d74a67b38efac.eot"},"./src/resource/style.css":function(e,n,r){var t=r("./node_modules/css-loader/dist/cjs.js!./src/resource/style.css");"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},c=r("./node_modules/style-loader/lib/addStyles.js")(t,o);t.locals&&(e.exports=t.locals),e.hot.accept("./node_modules/css-loader/dist/cjs.js!./src/resource/style.css",function(){var n=r("./node_modules/css-loader/dist/cjs.js!./src/resource/style.css");if("string"==typeof n&&(n=[[e.i,n,""]]),!function(e,n){var r,t=0;for(r in e){if(!n||e[r]!==n[r])return!1;t++}for(r in n)t--;return 0===t}(t.locals,n.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");c(n)}),e.hot.dispose(function(){c()})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,